#!/usr/bin/bash
# Copyright (c) 2024, 2025 Quantius Benignus
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#--------------------------------------------------------------------------

# To be used in correlation with:
# 1. a (systemd-run?) whisper-server (see whisper-server.service)
# 2. a set of keybindings to run (and optionally stop), the `wsi -n` command (resp `wsi -k`)


# ToDo:
# UI: checkbox (bound to gsetting autopaste)

# Same script can be used to send the SIGINT.
# `wsi -k` is just an handy equivalent to `pkill -SIGINT wsi`
if [[ $1 == -k ]]; then
	pkill -SIGINT -eo wsi
	exit
fi

# Are we already running this? (prevent multiple hotkey presses)
pidof -q wsi && exit 0

export LD_LIBRARY_PATH=/usr/local/lib KEEP_TEMP_FILE=1

#The main configuration for this and all other BlahST tools is now in blahst.cfg, please, edit that file as needed.
source $HOME/.config/blahst.cfg
source $HOME/.local/bin/blahst-helpers

# Get the current input method as a good hint for the language to be used.
# (if found it forces the language)
if [[ ${XDG_CURRENT_DESKTOP,,} =~ gnome ]] && type -P gsettings &> /dev/null; then
    input_method=$(gsettings get org.gnome.desktop.input-sources mru-sources | cut -d"'" -f2 | cut -d"+" -f1)
    [[ $input_method =~ uk|us ]] && input_method=en
    if [[ -n $input_method && ${#input_method} == 2 ]]; then
	# use for language forcing(?)
	LANGUAGE=$input_method
	# ensure `dotool` use the current input method in case of ctrl+v
	export DOTOOL_XKB_LAYOUT=$input_method
    fi
fi

#Local overrides:
AUTOPASTE=1
#PRIMESEL=1

#---END USER CONFIG BLOCK---

# Process command line arguments first
while [ $# -gt 0 ]; do
    case "$1" in
        -p|--primary)
            # To enable pasting with the middle mouse button
            PRIMESEL=1
            shift
            ;;
        -w|--whisperfile)
            whf="$WHISPERFILE"
            shift
            ;;
        -n|--netapi)
            #This uses the hostname or IP and port specified in the config block
            #Can be overwritten with a supplied command-line argument IP:PORT instead of this option
            IPnPORT="$WHOST:$WPORT"
            if [[ "$(curl -s -f -o /dev/null -w '%{http_code}' $IPnPORT)" != "200" ]]; then
                echo "Can't connect to whisper.cpp server at provided address!" >&2
                desknote "No connection to Whisper.cpp server" "No whisper.cpp server at $IPnPORT."
                exit 1
            fi
            shift
            ;;
        --help)
            echo "Usage: $0 [-p|--primary] [-n|--netapi] [-w|--whisperfile] [IP:PORT]"
            echo "  -p, --primary: Use PRIMARY selection instead of CLIPBOARD (default - the better choice when autopaste is on)"
            echo "  -n, --netapi: Use the preconfigured IP/hostanem and port to call a whisper.cpp server for inference."
            echo "  -w, --whisperfile: Use the preconfigured whisperfile***.llamafile for inference."
            echo "  any command-line argument: Expected to be of the form IP:PORT or HOSTNAME:PORT to call a server other than the preconfigured."
            exit 0
            ;;
        *)
            #The network address and port should have already been sanitized in extension
            IPnPORT=$1
            if [[ "$(curl -s -f -o /dev/null -w '%{http_code}' $IPnPORT)" != "200" ]]; then
                echo "Can't connect to a whisper.cpp server at provided address!" >&2
                desknote "No connection to Whisper.cpp server" "No whisper.cpp server at $IPnPORT."
                exit 1
            fi
            shift
            ;;
    esac
done

send_audio() {
    #The server inference has precedence (i.e. -w will be ignored if -n is present).
    if [ -n "$IPnPORT" ]; then
	str=$(curl -S -s $IPnPORT/inference \
		   -H "Content-Type: multipart/form-data" \
		   -F file="@$ramf" \
		   -F language="${LANGUAGE:-auto}" \
		   -F temperature="0.0" \
		   -F temperature_inc="0.2" \
		   -F response_format="text")
	# | jq -r '.text' )
    elif [[ "$whf" == *.llamafile ]]; then
	#echo "Using whisperfile: "
	str="$($whf -t $NTHR -nt -f '$ramf' 2>/dev/null)"
    else
	str="$(transcribe -t $NTHR -nt -m $WMODEL -f '$ramf' 2>/dev/null)"
    fi

    [[ ${KEEP_TEMP_FILE:-0} != 1 ]] && rm -f "$ramf"

    # Whisper detected non-speech events such as (wind blowing):
    str="${str/\(*\)}"
    str="${str/\[*\]}"
    str="${str#$'\n'}"
    str="${str#$'\n'}"
    #Prefer the power of zsh, but lose full POSIX compliance.
    if [ -n "$ZSH_NAME" ]; then
	str="${str#*([[:space:]])}"
	str="${(C)str:0:1}${str#?}"
    elif [ -n "$BASH" ]; then
	#Running in bash because you changed the shebang on line 1
	str="${str##+([[:space:]])}"
	str="${str^}"
    else
	echo "Unknown shell, assuming bash compliance"
	str="${str##+([[:space:]])}"
	str="${str^}"
    fi
}

handle_transcription() {
    #We have a result, now we make a few decisions:
    #If this is somehow run in a text console:
    if [[ -z $DISPLAY || -z $DESKTOP_SESSION || -z $XDG_CURRENT_DESKTOP ]]; then
	#"Not running in a known graphics environment. Using standard output:
	echo $str ; exit 0
    else
	case "$wm" in
	    x11)
		echo $str | { (( $PRIMESEL )) && xsel -ip || xsel -ib; }
		autopaste $wm
		;;
	    wayland)
		echo $str | { (( $PRIMESEL )) && wl-copy -p || wl-copy; }
		autopaste $wm
		;;
	    *)
		echo $str
		;;
	esac
    fi
}

sig_handler() {
    trap - SIGINT
    # echo "[int] $pid"
    kill -SIGINT $pid
    send_audio
    handle_transcription
    exit
}

umask 077
set -e

# https://github.com/chirlu/sox/pull/4/files is likely desirable to avoid loosing 250ms of audio
# Note that in case of interruption, Sox may badly truncate the wav leading whisper.cpp to
# believe it's an week-long audio file.
rec -q -t wav -r 16k -b 16 -c 1 --buffer 2500 --input-buffer 2500 "$ramf" rate 16k silence 1 0.1 1% 1 2.0 5% &
pid=$!
trap sig_handler SIGINT
wait

send_audio
handle_transcription
